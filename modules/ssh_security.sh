#!/bin/bash

# SSH Security Module v1.0

readonly SSH_CONFIG="/etc/ssh/sshd_config"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–∏ –≤ sshd_config
set_sshd_config_option() {
    # usage: set_sshd_config_option "Directive" "value"
    local directive="$1"
    local value="$2"
    if grep -Eq "^#?${directive}\\b" "$SSH_CONFIG"; then
        # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É (–≤–∫–ª—é—á–∞—è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é)
        sed -i "s~^#\?${directive}.*~${directive} ${value}~" "$SSH_CONFIG"
    else
        echo "${directive} ${value}" >> "$SSH_CONFIG"
    fi
}

# –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
backup_ssh_config() {
    local backup_dir="$SCRIPT_DIR/Backups"
    mkdir -p "$backup_dir"
    local backup_file
    backup_file="$backup_dir/sshd_config.backup.$(date +%Y%m%d_%H%M%S)"
    if cp "$SSH_CONFIG" "$backup_file" 2>/dev/null; then
        log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backup_file"
        return 0
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
        return 1
    fi
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UFW –¥–ª—è SSH –ø–æ—Ä—Ç–∞
update_ufw_ssh_port() {
    local old_port="$1"
    local new_port="$2"
    
    if ! command -v ufw &>/dev/null; then
        log_warning "UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
        return 0
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ UFW
    if ! ufw status | grep -q "Status: active"; then
        log_warning "UFW –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
        return 0
    fi
    
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª UFW..."
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SSH –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ—Ä—Ç–∞
    if [[ "$old_port" != "$new_port" ]]; then
        log_info "–ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö SSH –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ—Ä—Ç–∞ $old_port"
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ—Ä—Ç–∞ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        local rules_to_delete=()
        
        # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å –ø–æ—Ä—Ç–æ–º –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º SSH
        while IFS= read -r line; do
            if [[ "$line" =~ \[.*\].*$old_port/tcp.*SSH ]] || [[ "$line" =~ \[.*\].*$old_port/tcp ]] && [[ "$line" =~ ALLOW ]]; then
                local rule_num
                rule_num=$(echo "$line" | grep -o '^\[[0-9]*\]' | tr -d '[]')
                if [[ -n "$rule_num" ]]; then
                    rules_to_delete+=("$rule_num")
                fi
            fi
        done < <(ufw status numbered 2>/dev/null)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—á—Ç–æ–±—ã –Ω–æ–º–µ—Ä–∞ –Ω–µ —Å–±–∏–ª–∏—Å—å)
        if [[ ${#rules_to_delete[@]} -gt 0 ]]; then
            for ((i=${#rules_to_delete[@]}-1; i>=0; i--)); do
                local rule_num="${rules_to_delete[i]}"
                log_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ #$rule_num –¥–ª—è –ø–æ—Ä—Ç–∞ $old_port"
                local delete_result=0
                echo "y" | ufw delete "$rule_num" 2>/dev/null || delete_result=$?
                [[ $delete_result -eq 0 ]] || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ #$rule_num"
            done
        else
            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–æ –ø—Ä—è–º–æ–º—É —É–∫–∞–∑–∞–Ω–∏—é –ø–æ—Ä—Ç–∞
            log_info "–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ $old_port –Ω–∞–ø—Ä—è–º—É—é"
            ufw delete allow "$old_port/tcp" 2>/dev/null || true
            ufw delete allow "$old_port" 2>/dev/null || true
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—Ç–∞
    if ufw status numbered | grep -q "$new_port/tcp"; then
        log_info "–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞ $new_port —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        log_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ SSH –ø–æ—Ä—Ç–∞ $new_port"
        ufw allow "$new_port/tcp" comment "SSH"
    fi
    
    log_success "UFW –ø—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è SSH –ø–æ—Ä—Ç–∞ $new_port"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    echo
    log_info "–¢–µ–∫—É—â–∏–µ UFW –ø—Ä–∞–≤–∏–ª–∞:"
    ufw status numbered | grep -E "(SSH|$new_port)" || echo "–ù–µ—Ç SSH –ø—Ä–∞–≤–∏–ª"
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UFW –ø—Ä–∞–≤–∏–ª–∞–º–∏
manage_ufw_rules() {
    clear
    log_info "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UFW –ø—Ä–∞–≤–∏–ª–∞–º–∏"
    echo
    
    if ! command -v ufw &>/dev/null; then
        log_error "UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    while true; do
        clear
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UFW –ø—Ä–∞–≤–∏–ª–∞–º–∏      ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        echo -e "${BLUE}–¢–µ–∫—É—â–∏–µ UFW –ø—Ä–∞–≤–∏–ª–∞:${NC}"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        ufw status numbered 2>/dev/null || echo "UFW –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        echo
        
        echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        echo "1. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ (–ø–æ –Ω–æ–º–µ—Ä–∞–º)"
        echo "2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"
        echo "3. üîÑ –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        echo "4. üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞"
        echo "0. üîô –ù–∞–∑–∞–¥ –≤ SSH –º–µ–Ω—é"
        echo
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-4]: " -n 1 -r action
        echo
        
        case $action in
            1) delete_ufw_rules ;;
            2) add_ufw_rule ;;
            3) continue ;;
            4) clear_all_ufw_rules ;;
            0) return 0 ;;
            *)
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
                sleep 1
                ;;
        esac
        
        if [[ "$action" != "0" && "$action" != "3" ]]; then
            echo
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
        fi
    done
}

# –£–¥–∞–ª–µ–Ω–∏–µ UFW –ø—Ä–∞–≤–∏–ª –ø–æ –Ω–æ–º–µ—Ä–∞–º
delete_ufw_rules() {
    echo
    log_info "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ UFW –ø—Ä–∞–≤–∏–ª"
    echo
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
    echo -e "${BLUE}–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:${NC}"
    ufw status numbered 2>/dev/null || echo "UFW –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    echo
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5): " -r rule_numbers
    
    if [[ -z "$rule_numbers" ]]; then
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª
    IFS=',' read -ra RULES <<< "$rule_numbers"
    local valid_rules=()
    
    for rule in "${RULES[@]}"; do
        rule=$(echo "$rule" | xargs) # trim whitespace
        if [[ "$rule" =~ ^[0-9]+$ ]]; then
            valid_rules+=("$rule")
        else
            log_warning "–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: '$rule'"
        fi
    done
    
    if [[ ${#valid_rules[@]} -eq 0 ]]; then
        log_error "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–∞–≤–∏–ª"
        return 1
    fi
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    mapfile -t valid_rules < <(sort -nr <<<"${valid_rules[*]}")
    
    echo
    log_info "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞: ${valid_rules[*]}"
    read -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
    for rule_num in "${valid_rules[@]}"; do
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ #$rule_num"
        local delete_result=0
        echo "y" | ufw delete "$rule_num" 2>/dev/null || delete_result=$?
        [[ $delete_result -eq 0 ]] || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ #$rule_num"
    done
    
    log_success "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ UFW –ø—Ä–∞–≤–∏–ª–∞
add_ufw_rule() {
    echo
    log_info "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ UFW –ø—Ä–∞–≤–∏–ª–∞"
    echo
    
    echo "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª:"
    echo "‚Ä¢ 22/tcp - —Ä–∞–∑—Ä–µ—à–∏—Ç—å TCP –ø–æ—Ä—Ç 22"
    echo "‚Ä¢ 80,443/tcp - —Ä–∞–∑—Ä–µ—à–∏—Ç—å HTTP –∏ HTTPS"
    echo "‚Ä¢ 3000:3010/tcp - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤"
    echo "‚Ä¢ from 192.168.1.0/24 to any port 22 - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ IP"
    echo
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8080/tcp): " -r rule_input
    
    if [[ -z "$rule_input" ]]; then
        log_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    read -p "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): " -r comment
    
    echo
    log_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞: $rule_input"
    if [[ -n "$comment" ]]; then
        log_info "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: $comment"
    fi
    
    read -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
    if [[ -n "$comment" ]]; then
        if ufw allow "$rule_input" comment "$comment"; then
            log_success "–ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"
        else
            log_error "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞"
        fi
    else
        if ufw allow "$rule_input"; then
            log_success "–ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
        else
            log_error "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞"
        fi
    fi
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö UFW –ø—Ä–∞–≤–∏–ª
clear_all_ufw_rules() {
    echo
    log_warning "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –ø—Ä–∞–≤–∏–ª–∞ UFW!"
    echo "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É."
    echo
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " -r confirmation
    
    if [[ "$confirmation" != "YES" ]]; then
        log_info "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        return 0
    fi
    
    log_info "–°–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª UFW..."
    ufw --force reset
    
    log_success "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ UFW —É–¥–∞–ª–µ–Ω—ã"
    log_warning "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞!"
}

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ SSH –ø–æ—Ä—Ç–∞
change_ssh_port() {
    clear
    log_info "üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ SSH –ø–æ—Ä—Ç–∞ (—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UFW)"
    echo
    
    local current_port
    current_port=$(grep "^Port" "$SSH_CONFIG" 2>/dev/null | awk '{print $2}' || echo "22")
    echo "–¢–µ–∫—É—â–∏–π SSH –ø–æ—Ä—Ç: $current_port"
    echo
    
    local new_port
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π SSH –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2222, 2200, 22000): " -r new_port
        
        if [[ -z "$new_port" ]]; then
            log_warning "–ü–æ—Ä—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            continue
        fi
        
        if [[ ! "$new_port" =~ ^[0-9]+$ ]] || [[ "$new_port" -lt 1024 ]] || [[ "$new_port" -gt 65535 ]]; then
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Ä—Ç –æ—Ç 1024 –¥–æ 65535"
            continue
        fi
        
        break
    done
    
    if [[ "$new_port" == "$current_port" ]]; then
        log_warning "–ù–æ–≤—ã–π –ø–æ—Ä—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º"
        return 0
    fi
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ UFW
    echo
    log_warning "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ UFW!"
    echo "   - –°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç $current_port –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ UFW (–µ—Å–ª–∏ –Ω–µ 22)"
    echo "   - –ù–æ–≤—ã–π –ø–æ—Ä—Ç $new_port –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ UFW"
    echo
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UFW? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_ssh_config
    
    # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç
    set_sshd_config_option "Port" "$new_port"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º UFW –ø—Ä–∞–≤–∏–ª–∞
    update_ufw_ssh_port "$current_port" "$new_port"
    
    log_success "SSH –ø–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ $new_port"
    log_info "üî• UFW –ø—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    
    echo
    log_warning "‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å SSH —Å–ª—É–∂–±—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!"
    log_info "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    if sshd -t 2>/dev/null; then
        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å SSH —Å–ª—É–∂–±—É —Å–µ–π—á–∞—Å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            if systemctl restart ssh; then
                log_success "SSH —Å–ª—É–∂–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
                echo
                log_info "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:"
                log_info "   ssh user@server -p $new_port"
                echo
                log_warning "‚ö†Ô∏è  –ù–ï –ó–ê–ö–†–´–í–ê–ô–¢–ï —ç—Ç—É —Å–µ—Å—Å–∏—é –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!"
            else
                log_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ SSH —Å–ª—É–∂–±—ã!"
                log_warning "SSH –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"
            fi
        else
            log_info "SSH —Å–ª—É–∂–±–∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:"
            log_info "   sudo systemctl restart ssh"
        fi
    else
        log_error "‚ö†Ô∏è  –û–®–ò–ë–ö–ê –≤ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏! SSH –ù–ï –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù!"
        echo "–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        sshd -t
        echo
        log_warning "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±–µ–∫–∞–ø–∞ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏"
    fi
}

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
disable_password_auth() {
    clear
    log_info "üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    echo
    
    local current_setting
    current_setting=$(grep "^PasswordAuthentication" "$SSH_CONFIG" 2>/dev/null | awk '{print $2}' || echo "yes")
    echo "–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: $current_setting"
    
    if [[ "$current_setting" == "no" ]]; then
        log_info "–ü–∞—Ä–æ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        return 0
    fi
    
    log_warning "–í–ù–ò–ú–ê–ù–ò–ï! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SSH –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"
    read -p "–û—Ç–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–æ–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        backup_ssh_config
        set_sshd_config_option "PasswordAuthentication" "no"
        log_success "–ü–∞—Ä–æ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    else
        log_info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    fi
}

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ root –≤—Ö–æ–¥–∞
disable_root_login() {
    clear
    log_info "üö´ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ SSH –≤—Ö–æ–¥–∞ –¥–ª—è root"
    echo
    local current_setting
    current_setting=$(grep "^PermitRootLogin" "$SSH_CONFIG" 2>/dev/null | awk '{print $2}' || echo "yes")
    echo "–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PermitRootLogin: $current_setting"
    echo
    read -p "–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Ö–æ–¥ root (PermitRootLogin no)? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        backup_ssh_config
        set_sshd_config_option "PermitRootLogin" "no"
        log_success "Root –≤—Ö–æ–¥ –ø–æ SSH –æ—Ç–∫–ª—é—á–µ–Ω"
    else
        log_info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–ª—é—á–µ–π —Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –±—É—Ñ–µ—Ä
generate_ssh_key() {
    clear
    log_info "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–ª—é—á–µ–π"
    echo
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–ª—é—á–∞
    echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª—é—á–∞:"
    echo "1. Ed25519 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π)"
    echo "2. RSA 4096 (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"
    echo
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø [1-2]: " -n 1 -r key_type
    echo
    
    local key_file="/root/.ssh/id_ed25519"
    local key_params="-t ed25519"
    
    case $key_type in
        1)
            key_file="/root/.ssh/id_ed25519"
            key_params="-t ed25519"
            log_info "–í—ã–±—Ä–∞–Ω —Ç–∏–ø: Ed25519"
            ;;
        2)
            key_file="/root/.ssh/id_rsa"
            local key_params
            key_params="-t rsa -b 4096"
            log_info "–í—ã–±—Ä–∞–Ω —Ç–∏–ø: RSA 4096"
            ;;
        *)
            log_warning "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Ed25519 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            ;;
    esac
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
    if [[ -f "$key_file" ]]; then
        echo
        log_warning "–ö–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $key_file"
        read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
            return 0
        fi
    fi
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
    mkdir -p /root/.ssh
    chmod 700 /root/.ssh
    
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞..."
    if ssh-keygen $key_params -f "$key_file" -N "" -C "root@$(hostname)"; then
        log_success "–ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $key_file"
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        local pub_key_file="${key_file}.pub"
        local pub_key_content
        pub_key_content=$(cat "$pub_key_file")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            if command -v xclip &>/dev/null; then
                echo "$pub_key_content" | xclip -selection clipboard
                log_success "–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (xclip)"
            elif command -v pbcopy &>/dev/null; then
                echo "$pub_key_content" | pbcopy
                log_success "–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (pbcopy)"
            elif command -v wl-copy &>/dev/null; then
                echo "$pub_key_content" | wl-copy
                log_success "–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (wl-copy)"
            else
                log_warning "–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (xclip/pbcopy/wl-copy)"
            fi
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
            echo
            log_info "üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:"
            echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            cat "$pub_key_file"
            echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            echo
            log_info "üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ:"
            log_info "   1. –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ: –ø—É–Ω–∫—Ç 3 ‚Üí –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞"
            log_info "   2. –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö: sudo ss ‚Üí 3. –ò–º–ø–æ—Ä—Ç –∫–ª—é—á–∞"
            echo
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
    else
        log_error "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞"
        return 1
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–ª—é—á–µ–π (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# –£–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—à–µ

# –ò–º–ø–æ—Ä—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ authorized_keys
install_public_key() {
    while true; do
        clear
        log_info "üì• –ò–º–ø–æ—Ä—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ authorized_keys"
        echo
        local auth_dir="/root/.ssh"
        local auth_file="$auth_dir/authorized_keys"
        mkdir -p "$auth_dir"
        chmod 700 "$auth_dir"

        echo "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–ª—é—á–∞:"
        echo "1. –í—Å—Ç–∞–≤–∏—Ç—å –∫–ª—é—á –≤—Ä—É—á–Ω—É—é"
        echo "2. –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–ª—é—á–æ–º (.pub)"
        echo "0. üîô –ù–∞–∑–∞–¥ –≤ SSH –º–µ–Ω—é"
        read -p "–í—ã–±–æ—Ä [0-2]: " -n 1 -r src_choice
        echo

        local pubkey
        case "$src_choice" in
        1)
            while true; do
                echo "–í—Å—Ç–∞–≤—å—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (–Ω–∞—á–∏–Ω–∞—è —Å ssh-rsa/ssh-ed25519) –∏ –Ω–∞–∂–º–∏—Ç–µ Enter:"
                read -r pubkey
                
                if [[ -z "$pubkey" ]]; then
                    log_warning "–ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                    continue
                fi
                
                if [[ ! "$pubkey" =~ ^ssh- ]]; then
                    log_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ssh-rsa, ssh-ed25519 –∏ —Ç.–¥."
                    echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                    continue
                fi
                
                break
            done
            ;;
        2)
            while true; do
                read -p "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: " -r key_path
                
                if [[ -z "$key_path" ]]; then
                    log_warning "–ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    continue
                fi
                
                if [[ ! -f "$key_path" ]]; then
                    log_error "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $key_path"
                    echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                    continue
                fi
                
                pubkey=$(sed -n '1p' "$key_path")
                if [[ -z "$pubkey" ]] || [[ ! "$pubkey" =~ ^ssh- ]]; then
                    log_error "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SSH –∫–ª—é—á"
                    echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                    continue
                fi
                
                break
            done
            ;;
        0)
            return 0
            ;;
        *)
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: '$src_choice'"
            sleep 2
            continue
            ;;
        esac

        touch "$auth_file"
        chmod 600 "$auth_file"

        if grep -Fxq "$pubkey" "$auth_file"; then
            log_warning "–¢–∞–∫–æ–π –∫–ª—é—á —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ authorized_keys"
            return 0
        fi

        echo "$pubkey" >> "$auth_file"
        log_success "–ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –≤ $auth_file"
        return 0
    done
}

# –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤ authorized_keys
list_authorized_keys() {
    clear
    log_info "üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤ /root/.ssh/authorized_keys"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    local auth_file="/root/.ssh/authorized_keys"
    if [[ -s "$auth_file" ]]; then
        nl -ba "$auth_file"
    else
        echo "–ù–µ—Ç –∫–ª—é—á–µ–π"
    fi
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ authorized_keys (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
manage_authorized_keys() {
    while true; do
        clear
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë      –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ authorized_keys      ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
        
        if [[ ! -f /root/.ssh/authorized_keys ]]; then
            log_warning "–§–∞–π–ª authorized_keys –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            echo
            echo "1. üîô –ù–∞–∑–∞–¥ –≤ SSH –º–µ–Ω—é"
            echo
            read -p "–ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: " -n 1 -r choice
            echo
            if [[ "$choice" == "1" ]]; then
                return 0
            fi
            continue
        fi
        
        local key_count
        if [[ -s /root/.ssh/authorized_keys ]]; then
            key_count=$(grep -c "^ssh-" /root/.ssh/authorized_keys 2>/dev/null || echo "0")
        else
            key_count="0"
        fi
        
        if [[ "$key_count" -eq 0 ]]; then
            log_warning "–í authorized_keys –Ω–µ—Ç SSH –∫–ª—é—á–µ–π"
            echo
            echo "–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
            echo "1. üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"
            echo "0. üîô –ù–∞–∑–∞–¥ –≤ SSH –º–µ–Ω—é"
            echo
            read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-1]: " -n 1 -r choice
            echo
            case $choice in
                1) 
                    install_public_key
                    continue
                    ;;
                0) 
                    return 0
                    ;;
                *)
                    log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: '$choice'"
                    sleep 1
                    continue
                    ;;
            esac
        fi
        
        log_info "üìã –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: $key_count"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        local line_num=1
        while IFS= read -r line; do
            if [[ "$line" =~ ^ssh- ]]; then
                local key_type="${line%% *}"
                local key_comment="${line##* }"
                if [[ "$key_comment" == "$line" ]]; then
                    key_comment="(–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)"
                fi
                echo "$line_num. $key_type ... $key_comment"
                ((line_num++))
            fi
        done < /root/.ssh/authorized_keys
        
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo
        echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        echo "1. üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
        echo "2. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á"
        echo "3. üëÅÔ∏è  –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –∫–ª—é—á"
        echo "0. üîô –ù–∞–∑–∞–¥ –≤ SSH –º–µ–Ω—é"
        echo
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-3]: " -n 1 -r action
        echo
        
        case $action in
            1) copy_authorized_key "$key_count" ;;
            2) remove_authorized_key "$key_count" ;;
            3) show_full_key "$key_count" ;;
            0) return 0 ;;
            *)
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: '$action'"
                sleep 2
                continue
                ;;
        esac
        
        if [[ "$action" != "0" ]]; then
            echo
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
        fi
    done
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
copy_authorized_key() {
    local max_keys="$1"
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è [1-$max_keys]: " -r key_num
    
    if [[ ! "$key_num" =~ ^[0-9]+$ ]] || [[ "$key_num" -lt 1 ]] || [[ "$key_num" -gt "$max_keys" ]]; then
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–∞"
        return 1
    fi
    
    local line_num=1
    local found_key=""
    while IFS= read -r line; do
        if [[ "$line" =~ ^ssh- ]]; then
            if [[ "$line_num" -eq "$key_num" ]]; then
                found_key="$line"
                break
            fi
            ((line_num++))
        fi
    done < /root/.ssh/authorized_keys
    
    if [[ -n "$found_key" ]]; then
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        if command -v xclip &>/dev/null; then
            echo "$found_key" | xclip -selection clipboard
            log_success "–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (xclip)"
        elif command -v pbcopy &>/dev/null; then
            echo "$found_key" | pbcopy
            log_success "–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (pbcopy)"
        elif command -v wl-copy &>/dev/null; then
            echo "$found_key" | wl-copy
            log_success "–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (wl-copy)"
        else
            log_warning "–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            echo "–ö–ª—é—á:"
            echo "$found_key"
        fi
    else
        log_error "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–ª—é—á–∞
show_full_key() {
    local max_keys="$1"
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ [1-$max_keys]: " -r key_num
    
    if [[ ! "$key_num" =~ ^[0-9]+$ ]] || [[ "$key_num" -lt 1 ]] || [[ "$key_num" -gt "$max_keys" ]]; then
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–∞"
        return 1
    fi
    
    local line_num=1
    while IFS= read -r line; do
        if [[ "$line" =~ ^ssh- ]]; then
            if [[ "$line_num" -eq "$key_num" ]]; then
                echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                echo "$line"
                echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                return 0
            fi
            ((line_num++))
        fi
    done < /root/.ssh/authorized_keys
    
    log_error "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
}

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–æ–∫–∏
remove_authorized_key() {
    local max_keys="$1"
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è [1-$max_keys]: " -r key_num
    
    if [[ ! "$key_num" =~ ^[0-9]+$ ]] || [[ "$key_num" -lt 1 ]] || [[ "$key_num" -gt "$max_keys" ]]; then
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª—é—á–∞"
        return 1
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω
    local line_num=1
    local found_key=""
    local key_comment=""
    while IFS= read -r line; do
        if [[ "$line" =~ ^ssh- ]]; then
            if [[ "$line_num" -eq "$key_num" ]]; then
                found_key="$line"
                key_comment="${line##* }"
                if [[ "$key_comment" == "$line" ]]; then
                    key_comment="(–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)"
                fi
                break
            fi
            ((line_num++))
        fi
    done < /root/.ssh/authorized_keys
    
    if [[ -z "$found_key" ]]; then
        log_error "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    echo
    log_warning "–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∫–ª—é—á: $key_comment"
    echo "–ö–ª—é—á: ${found_key:0:50}..."
    echo
    read -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    local backup_dir="$SCRIPT_DIR/Backups"
    mkdir -p "$backup_dir"
    local backup_file
    backup_file="$backup_dir/authorized_keys.backup.$(date +%Y%m%d_%H%M%S)"
    cp /root/.ssh/authorized_keys "$backup_file"
    log_success "–°–æ–∑–¥–∞–Ω –±–µ–∫–∞–ø: $backup_file"
    
    # –£–¥–∞–ª—è–µ–º –∫–ª—é—á
    local temp_file
    temp_file=$(mktemp)
    line_num=1
    while IFS= read -r line; do
        if [[ "$line" =~ ^ssh- ]]; then
            if [[ "$line_num" -ne "$key_num" ]]; then
                echo "$line" >> "$temp_file"
            fi
            ((line_num++))
        else
            echo "$line" >> "$temp_file"
        fi
    done < /root/.ssh/authorized_keys
    
    mv "$temp_file" /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/authorized_keys
    
    log_success "–ö–ª—é—á —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    log_info "üíæ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $(basename "$backup_file")"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH
show_ssh_status() {
    clear
    log_info "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    local port
    local password_auth
    local root_login
    
    port=$(grep "^Port" "$SSH_CONFIG" 2>/dev/null | awk '{print $2}' || echo "22 (default)")
    password_auth=$(grep "^PasswordAuthentication" "$SSH_CONFIG" 2>/dev/null | awk '{print $2}' || echo "yes (default)")
    root_login=$(grep "^PermitRootLogin" "$SSH_CONFIG" 2>/dev/null | awk '{print $2}' || echo "yes (default)")
    
    echo "SSH Port: $port"
    echo "Password Authentication: $password_auth"
    echo "Root Login: $root_login"
    echo "SSH Service: $(systemctl is-active ssh 2>/dev/null)"
    
    if [[ -f /root/.ssh/authorized_keys ]]; then
        local key_count
        key_count=$(grep -c "^ssh-" /root/.ssh/authorized_keys 2>/dev/null || echo "0")
        echo "Authorized Keys: $key_count"
    else
        echo "Authorized Keys: none"
    fi
    
    # UFW —Å—Ç–∞—Ç—É—Å –¥–ª—è SSH
    if command -v ufw &>/dev/null; then
        local ufw_status
        ufw_status=$(ufw status | head -1 | awk '{print $2}')
        echo "UFW Status: $ufw_status"
        if ufw status | grep -q "Status: active"; then
            local ssh_rules
            ssh_rules=$(ufw status | grep -E "^$port|^22" | grep -c "tcp" || echo "0")
            echo "UFW SSH Rules: $ssh_rules active"
        fi
    else
        echo "UFW: not installed"
    fi
    
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SSH
restart_ssh() {
    clear
    log_info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SSH —Å–ª—É–∂–±—ã"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if ! sshd -t 2>/dev/null; then
        log_error "–û—à–∏–±–∫–∏ –≤ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        sshd -t
        return 1
    fi
    
    read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å SSH —Å–ª—É–∂–±—É? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if systemctl restart ssh; then
            log_success "SSH —Å–ª—É–∂–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
        else
            log_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ SSH"
        fi
    fi
}

# –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–∞–º–∏
ssh_key_management() {
    while true; do
        clear
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–∞–º–∏        ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
        
        echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        echo "1. üîë –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ SSH –∫–ª—é—á–∏"
        echo "2. üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á"
        echo "3. üìú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ authorized_keys (–ø—Ä–æ—Å–º–æ—Ç—Ä/–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)"
        echo "0. üîô –ù–∞–∑–∞–¥ –≤ SSH –º–µ–Ω—é"
        echo
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-3]: " -n 1 -r key_choice
        echo
        
        case $key_choice in
            1) generate_ssh_key ;;
            2) install_public_key ;;
            3) manage_authorized_keys ;;
            0) return 0 ;;
            *)
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: '$key_choice'"
                sleep 1
                continue
                ;;
        esac
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π
    done
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
restore_from_backup() {
    while true; do
        clear
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë      –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±–µ–∫–∞–ø–∞        ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
        
        echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:"
        echo "1. üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (/etc/ssh/sshd_config)"
        echo "2. üîë –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å authorized_keys"
        echo "3. üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
        echo "0. üîô –ù–∞–∑–∞–¥ –≤ SSH –º–µ–Ω—é"
        echo
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-3]: " -n 1 -r restore_choice
        echo
        
        case $restore_choice in
            1) restore_ssh_config ;;
            2) restore_authorized_keys ;;
            3) show_backup_files ;;
            0) return 0 ;;
            *)
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: '$restore_choice'"
                sleep 1
                continue
                ;;
        esac
        
        if [[ "$restore_choice" != "0" ]]; then
            echo
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
        fi
    done
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
restore_ssh_config() {
    clear
    log_info "üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo
    
    # –ò—â–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local backup_dir="$SCRIPT_DIR/Backups"
    local backup_files
    mapfile -t backup_files < <(find "$backup_dir" -name "sshd_config.backup.*" 2>/dev/null | sort -r)
    
    if [[ ${#backup_files[@]} -eq 0 ]]; then
        log_warning "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    fi
    
    echo "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    local i=1
    for backup in "${backup_files[@]}"; do
        local backup_date
        backup_date=$(stat -c %y "$backup" 2>/dev/null | cut -d' ' -f1,2)
        echo "$i. $(basename "$backup") (—Å–æ–∑–¥–∞–Ω: $backup_date)"
        ((i++))
    done
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è [1-$((i-1))] –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: " -r backup_num
    
    if [[ "$backup_num" == "0" ]]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    if [[ ! "$backup_num" =~ ^[0-9]+$ ]] || [[ "$backup_num" -lt 1 ]] || [[ "$backup_num" -gt $((i-1)) ]]; then
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        return 1
    fi
    
    local selected_backup="${backup_files[$((backup_num-1))]}"
    
    echo
    log_warning "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â—É—é SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!"
    echo "–ë—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: $(basename "$selected_backup")"
    echo
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    backup_ssh_config
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if cp "$selected_backup" "$SSH_CONFIG"; then
        log_success "SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ $(basename "$selected_backup")"
        log_warning "‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å SSH —Å–ª—É–∂–±—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!"
        echo
        read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å SSH —Å–ª—É–∂–±—É —Å–µ–π—á–∞—Å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            restart_ssh
        fi
    else
        log_error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        return 1
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ authorized_keys
restore_authorized_keys() {
    clear
    log_info "üîë –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ authorized_keys"
    echo
    
    # –ò—â–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ authorized_keys
    local backup_dir="$SCRIPT_DIR/Backups"
    local backup_files
    mapfile -t backup_files < <(find "$backup_dir" -name "authorized_keys.backup.*" 2>/dev/null | sort -r)
    
    if [[ ${#backup_files[@]} -eq 0 ]]; then
        log_warning "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ authorized_keys –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    fi
    
    echo "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ authorized_keys:"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    local i=1
    for backup in "${backup_files[@]}"; do
        local backup_date key_count
        backup_date=$(stat -c %y "$backup" 2>/dev/null | cut -d' ' -f1,2)
        key_count=$(grep -c "^ssh-" "$backup" 2>/dev/null || echo "0")
        echo "$i. $(basename "$backup") (—Å–æ–∑–¥–∞–Ω: $backup_date, –∫–ª—é—á–µ–π: $key_count)"
        ((i++))
    done
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è [1-$((i-1))] –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: " -r backup_num
    
    if [[ "$backup_num" == "0" ]]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    if [[ ! "$backup_num" =~ ^[0-9]+$ ]] || [[ "$backup_num" -lt 1 ]] || [[ "$backup_num" -gt $((i-1)) ]]; then
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        return 1
    fi
    
    local selected_backup="${backup_files[$((backup_num-1))]}"
    
    echo
    log_warning "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–π authorized_keys!"
    echo "–ë—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: $(basename "$selected_backup")"
    echo
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    if [[ -f /root/.ssh/authorized_keys ]]; then
        local current_backup
        current_backup="/root/.ssh/authorized_keys.backup.$(date +%Y%m%d_%H%M%S)"
        cp /root/.ssh/authorized_keys "$current_backup"
        log_info "–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: $(basename "$current_backup")"
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if cp "$selected_backup" /root/.ssh/authorized_keys; then
        chmod 600 /root/.ssh/authorized_keys
        log_success "authorized_keys –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ $(basename "$selected_backup")"
    else
        log_error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è authorized_keys"
        return 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
show_backup_files() {
    clear
    log_info "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
    echo
    
    local backup_dir="$SCRIPT_DIR/Backups"
    
    # SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    echo -e "${BLUE}üîß SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (sshd_config):${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    local ssh_backups
    mapfile -t ssh_backups < <(find "$backup_dir" -name "sshd_config.backup.*" 2>/dev/null | sort -r)
    
    if [[ ${#ssh_backups[@]} -eq 0 ]]; then
        echo "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        for backup in "${ssh_backups[@]}"; do
            local backup_date backup_size
            backup_date=$(stat -c %y "$backup" 2>/dev/null | cut -d' ' -f1,2)
            backup_size=$(stat -c %s "$backup" 2>/dev/null)
            echo "üìÑ $(basename "$backup")"
            echo "   –°–æ–∑–¥–∞–Ω: $backup_date"
            echo "   –†–∞–∑–º–µ—Ä: $backup_size –±–∞–π—Ç"
            echo
        done
    fi
    
    echo
    # authorized_keys
    echo -e "${BLUE}üîë Authorized Keys:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    local key_backups
    mapfile -t key_backups < <(find "$backup_dir" -name "authorized_keys.backup.*" 2>/dev/null | sort -r)
    
    if [[ ${#key_backups[@]} -eq 0 ]]; then
        echo "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        for backup in "${key_backups[@]}"; do
            local backup_date backup_size key_count
            backup_date=$(stat -c %y "$backup" 2>/dev/null | cut -d' ' -f1,2)
            backup_size=$(stat -c %s "$backup" 2>/dev/null)
            key_count=$(grep -c "^ssh-" "$backup" 2>/dev/null || echo "0")
            echo "üìÑ $(basename "$backup")"
            echo "   –°–æ–∑–¥–∞–Ω: $backup_date"
            echo "   –†–∞–∑–º–µ—Ä: $backup_size –±–∞–π—Ç"
            echo "   –ö–ª—é—á–µ–π: $key_count"
            echo
        done
    fi
    
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
change_user_password() {
    clear
    log_info "üîê –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    echo
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    local users=()
    local user_count=0
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ /etc/passwd —Å UID >= 1000 (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
    while IFS=: read -r username _ uid _ _ home shell; do
        if [[ "$uid" -ge 1000 && "$home" =~ ^/home/ && "$shell" != "/usr/sbin/nologin" && "$shell" != "/bin/false" ]]; then
            ((user_count++))
            users+=("$username")
            echo "$user_count. $username (–¥–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $home)"
        fi
    done < /etc/passwd
    
    # –î–æ–±–∞–≤–ª—è–µ–º root –æ—Ç–¥–µ–ª—å–Ω–æ
    ((user_count++))
    users+=("root")
    echo "$user_count. root (—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"
    
    echo
    echo "0. üîô –ù–∞–∑–∞–¥ –≤ SSH –º–µ–Ω—é"
    echo
    
    if [[ ${#users[@]} -eq 1 ]]; then
        log_warning "–ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å root"
    fi
    
    while true; do
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [0-$user_count]: " -r user_choice
        
        if [[ "$user_choice" == "0" ]]; then
            return 0
        fi
        
        if [[ ! "$user_choice" =~ ^[0-9]+$ ]] || [[ "$user_choice" -lt 1 ]] || [[ "$user_choice" -gt "$user_count" ]]; then
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ $user_count"
            continue
        fi
        
        break
    done
    
    local selected_user="${users[$((user_choice-1))]}"
    
    echo
    log_info "–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $selected_user"
    echo
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if [[ "$selected_user" == "root" ]]; then
        log_warning "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è root!"
        echo "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å SSH –∫–ª—é—á–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞"
        echo "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–æ–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–π"
        echo "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ"
    else
        log_info "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"
        echo "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–æ–≤)"
        echo "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ —Ü–∏—Ñ—Ä—ã, –±—É–∫–≤—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
        echo "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞—Ä–Ω—ã–µ —Å–ª–æ–≤–∞"
    fi
    
    echo
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è $selected_user? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    echo
    log_info "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $selected_user"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
    if passwd "$selected_user"; then
        log_success "‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $selected_user —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        echo
        log_info "üîí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:"
        
        if [[ "$selected_user" == "root" ]]; then
            echo "‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"
            echo "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø—É–Ω–∫—Ç 5)"
            echo "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SSH –∫–ª—é—á–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        else
            echo "‚Ä¢ –°–æ–æ–±—â–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"
            echo "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ"
            echo "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É SSH –∫–ª—é—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        fi
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        local password_auth
        password_auth=$(grep "^PasswordAuthentication" "$SSH_CONFIG" 2>/dev/null | awk '{print $2}' || echo "yes")
        echo
        log_info "üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $password_auth"
        
        if [[ "$password_auth" == "yes" ]]; then
            echo "üí° –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
        else
            echo "‚ö†Ô∏è  –ü–∞—Ä–æ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ SSH –∫–ª—é—á–∏"
        fi
        
    else
        log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è"
        echo "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        echo "‚Ä¢ –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"
        echo "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"
        echo "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞"
    fi
    
    echo
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é SSH –º–æ–¥—É–ª—è
configure_ssh_security() {
    while true; do
        clear
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë          SSH Security Menu           ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
        echo "1. üîß –ò–∑–º–µ–Ω–∏—Ç—å SSH –ø–æ—Ä—Ç (+ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UFW)"
        echo "2. üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH –∫–ª—é—á–∞–º–∏ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è/–∏–º–ø–æ—Ä—Ç/–ø—Ä–æ—Å–º–æ—Ç—Ä/—É–¥–∞–ª–µ–Ω–∏–µ)"
        echo "3. üîê –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        echo "4. üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        echo "5. üîí –û—Ç–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–æ–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
        echo "6. üö´ –û—Ç–∫–ª—é—á–∏—Ç—å root SSH –≤—Ö–æ–¥"
        echo "7. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å SSH —Å–ª—É–∂–±—É"
        echo "8. üîô –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        echo "0. ‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        echo
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-8]: " -n 1 -r choice
        echo
        
        case $choice in
            1) change_ssh_port ;;
            2) ssh_key_management ;;
            3) change_user_password ;;
            4) show_ssh_status ;;
            5) disable_password_auth ;;
            6) disable_root_login ;;
            7) restart_ssh ;;
            8) restore_from_backup ;;
            0) return 0 ;;
            *)
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: '$choice'"
                sleep 2
                continue
                ;;
        esac
        
        if [[ "$choice" != "0" ]]; then
            echo
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
        fi
    done
}
