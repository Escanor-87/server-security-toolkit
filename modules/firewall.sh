#!/bin/bash

# Firewall Module v1.0

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UFW
install_ufw() {
    if command -v ufw &>/dev/null; then
        log_success "UFW —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    fi
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ UFW..."
    if apt update && apt install -y ufw; then
        log_success "UFW —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    else
        log_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ UFW"
        return 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π—Ä–≤–æ–ª–∞
setup_basic_firewall() {
    clear
    log_info "üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π—Ä–≤–æ–ª–∞"
    echo
    
    if ! command -v ufw &>/dev/null; then
        log_error "UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
    echo -e "${YELLOW}üí° –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:${NC}"
    echo -e "${YELLOW}   ‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ UFW${NC}"
    echo -e "${YELLOW}   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç SSH (—Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç)${NC}"
    echo -e "${YELLOW}   ‚Ä¢ –û—Ç–∫—Ä–æ–µ—Ç HTTP (80) –∏ HTTPS (443)${NC}"
    echo -e "${YELLOW}   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø–æ–ª–∏—Ç–∏–∫—É: Deny incoming / Allow outgoing${NC}"
    echo
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (Enter = –¥–∞, 0 = –æ—Ç–º–µ–Ω–∞): " -r
    if [[ "$REPLY" == "0" ]]; then
        log_info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–≤–∏–ª UFW
    local backup_dir="$SCRIPT_DIR/Backups"
    local backup_file
    backup_file="$backup_dir/ufw_rules_$(date +%Y%m%d_%H%M%S).tar.gz"
    
    mkdir -p "$backup_dir"
    if tar -czf "$backup_file" -C /etc/ufw . 2>/dev/null; then
        log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è UFW: $backup_file"
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é UFW"
    fi
    
    log_info "–°–±—Ä–æ—Å –ø—Ä–∞–≤–∏–ª UFW..."
    ufw --force reset
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–∏—Ç–∏–∫..."
    ufw default deny incoming
    ufw default allow outgoing
    
    # SSH –ø–æ—Ä—Ç
    local ssh_port
    ssh_port=$(grep "^Port" /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}' || echo "22")
    log_info "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ SSH –Ω–∞ –ø–æ—Ä—Ç—É $ssh_port..."
    ufw allow "$ssh_port"/tcp
    
    # –í–µ–±-—Å–µ—Ä–≤–µ—Ä—ã
    log_info "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ HTTP/HTTPS..."
    ufw allow 80/tcp
    ufw allow 443/tcp
    
    log_info "–í–∫–ª—é—á–µ–Ω–∏–µ UFW..."
    ufw --force enable
    
    log_success "–ë–∞–∑–æ–≤—ã–π —Ñ–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    ufw status verbose
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å UFW
show_firewall_status() {
    clear
    log_info "üìã –°—Ç–∞—Ç—É—Å —Ñ–∞–π—Ä–≤–æ–ª–∞"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    if command -v ufw &>/dev/null; then
        ufw status verbose
    else
        echo "UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
normalize_firewall_rule_text() {
    local text="$1"
    # –°–∂–∏–º–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    text=$(echo "$text" | sed -E 's/[[:space:]]+/ /g' | sed -E 's/^ //; s/ $//')
    echo "$text"
}

# –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
get_current_rule_number() {
    local target_raw="$1"
    local target
    target=$(normalize_firewall_rule_text "$target_raw")

    local status_output
    status_output=$(ufw status numbered 2>/dev/null)

    local line
    while IFS= read -r line; do
        if [[ "$line" =~ ^[[:space:]]*\[[[:space:]]*([0-9]+)\][[:space:]]*(.*)$ ]]; then
            local number="${BASH_REMATCH[1]}"
            local content="${BASH_REMATCH[2]}"
            content=$(normalize_firewall_rule_text "$content")
            if [[ "$content" == "$target" ]]; then
                echo "$number"
                return 0
            fi
        fi
    done <<< "$status_output"

    return 1
}

# –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ (—Å —Ü–∏–∫–ª–æ–º –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
delete_firewall_rule() {
    while true; do
        clear
        log_info "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"
        echo

        if ! command -v ufw &>/dev/null; then
            log_error "UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            return 1
        fi

        echo -e "${BLUE}–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ UFW:${NC}"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        ufw status numbered 2>/dev/null || echo "UFW –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏
        local rules_output
        rules_output=$(ufw status numbered 2>/dev/null)

        if [[ -z "$rules_output" ]] || [[ "$rules_output" == *"Status: inactive"* ]]; then
            log_warning "UFW –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª"
            return 0
        fi

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª
        local rule_numbers=()
        local rule_lines=()
        
        while IFS= read -r line; do
            if [[ "$line" =~ ^[[:space:]]*\[[[:space:]]*([0-9]+)\][[:space:]]*(.*)$ ]]; then
                local rule_num="${BASH_REMATCH[1]}"
                local rule_text="${BASH_REMATCH[2]}"
                rule_numbers+=("$rule_num")
                rule_lines+=("$(normalize_firewall_rule_text "$rule_text")")
            fi
        done <<< "$rules_output"

        if [[ ${#rule_numbers[@]} -eq 0 ]]; then
            log_info "–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
            return 0
        fi

        echo "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é):"
        echo

        local rule_input
        read -p "–ù–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞: " -r rule_input

        # –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é
        if [[ "$rule_input" == "0" ]] || [[ -z "$rule_input" ]]; then
            log_info "–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ñ–∞–π—Ä–≤–æ–ª–∞"
            return 0
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
        if [[ ! "$rule_input" =~ ^[0-9]+$ ]]; then
            log_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞: '$rule_input'"
            sleep 2
            continue
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
        local found=false
        local rule_signature=""
        for idx in "${!rule_numbers[@]}"; do
            if [[ "$rule_input" == "${rule_numbers[$idx]}" ]]; then
                found=true
                rule_signature="${rule_lines[$idx]}"
                break
            fi
        done

        if [[ "$found" == "false" ]]; then
            log_error "–ü—Ä–∞–≤–∏–ª–æ #$rule_input –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ"
            sleep 2
            continue
        fi

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        echo
        log_warning "‚ö†Ô∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ #$rule_input: $rule_signature"
        echo
        read -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (Enter = –¥–∞, 0 = –æ—Ç–º–µ–Ω–∞): " -r

        if [[ "$REPLY" == "0" ]]; then
            log_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            sleep 1
            continue
        fi

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ #$rule_input..."
        
        local delete_result=0
        echo "y" | ufw delete "$rule_input" >/dev/null 2>&1 || delete_result=$?
        
        if [[ $delete_result -eq 0 ]]; then
            # –°–æ–∑–¥–∞—ë–º –±–µ–∫–∞–ø –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
            if declare -f create_backup &>/dev/null; then
                create_backup "ufw" "/etc/ufw" "after_delete_rule" >/dev/null 2>&1
            fi
            log_success "–ü—Ä–∞–≤–∏–ª–æ #$rule_input —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        else
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ #$rule_input"
        fi

        echo
        sleep 1
    done
}
add_firewall_rule() {
    clear
    log_info "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"
    echo
    
    local port
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç: " -r port
        
        if [[ -z "$port" ]]; then
            log_warning "–ü–æ—Ä—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            continue
        fi
        
        if [[ ! "$port" =~ ^[0-9]+$ ]]; then
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã."
            continue
        fi
        
        if [[ "$port" -lt 1 ]] || [[ "$port" -gt 65535 ]]; then
            log_error "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535"
            continue
        fi
        
        break
    done
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª:"
    echo "1. TCP"
    echo "2. UDP" 
    echo "3. TCP –∏ UDP"
    echo "0. üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ñ–∞–π—Ä–≤–æ–ª–∞"
    local proto_choice
    read -p "–í—ã–±–æ—Ä [0-3]: " -n 1 -r proto_choice
    echo
    
    local protocol
    case $proto_choice in
        1) protocol="tcp" ;;
        2) protocol="udp" ;;
        3) protocol="" ;;
        0) return 0 ;;
        *) 
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: '$proto_choice'"
            sleep 2
            return 1
            ;;
    esac
    
    local comment
    read -p "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): " -r comment
    
    if [[ -n "$protocol" ]]; then
        if [[ -n "$comment" ]]; then
            ufw allow "$port"/"$protocol" comment "$comment"
        else
            ufw allow "$port"/"$protocol"
        fi
    else
        if [[ -n "$comment" ]]; then
            ufw allow "$port" comment "$comment"
        else
            ufw allow "$port"
        fi
    fi
    
    # –°–æ–∑–¥–∞—ë–º –±–µ–∫–∞–ø –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞
    if declare -f create_backup &>/dev/null; then
        create_backup "ufw" "/etc/ufw" "after_add_rule" >/dev/null 2>&1
    fi
    
    log_success "–ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ—Ä—Ç–∞ $port"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Firewall –º–æ–¥—É–ª—è
configure_firewall() {
    while true; do
        clear
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë         Firewall Setup Menu          ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
        echo "1. üõ°Ô∏è  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—ã–π —Ñ–∞–π—Ä–≤–æ–ª"
        echo "2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"
        echo "3. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"
        echo "4. üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
        echo "5. üîô –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        echo "6. üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UFW"
        echo "0. ‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        echo
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-6]: " -n 1 -r choice
        echo
        
        case $choice in
            1) setup_basic_firewall ;;
            2) add_firewall_rule ;;
            3) delete_firewall_rule 
               continue ;;  # delete_firewall_rule –∏–º–µ–µ—Ç —Å–≤–æ–π read, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–π
            4) show_firewall_status ;;
            5) restore_firewall_backup ;;
            6) install_ufw ;;
            0) return 0 ;;
            *) 
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
                sleep 1
                ;;
        esac
        
        if [[ "$choice" != "0" && "$choice" != "3" ]]; then
            echo
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
        fi
    done
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ firewall –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
restore_firewall_backup() {
    clear
    log_info "üîô –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ UFW –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    echo
    
    local backup_dir="$SCRIPT_DIR/Backups"
    if [[ ! -d "$backup_dir" ]]; then
        log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $backup_dir"
        return 0
    fi
    
    # –ò—â–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ UFW
    local backup_files
    mapfile -t backup_files < <(find "$backup_dir" -name "ufw_rules_*.tar.gz" 2>/dev/null | sort -r)
    
    if [[ ${#backup_files[@]} -eq 0 ]]; then
        log_warning "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ UFW –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    fi
    
    echo "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ UFW:"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    local i=1
    for backup in "${backup_files[@]}"; do
        local backup_date backup_size
        backup_date=$(stat -c %y "$backup" 2>/dev/null | cut -d' ' -f1,2)
        backup_size=$(stat -c %s "$backup" 2>/dev/null)
        echo "$i. $(basename "$backup") (—Å–æ–∑–¥–∞–Ω: $backup_date, —Ä–∞–∑–º–µ—Ä: $backup_size –±–∞–π—Ç)"
        ((i++))
    done
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è [1-$((i-1))] –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: " -r backup_num
    
    if [[ "$backup_num" == "0" ]]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    if [[ ! "$backup_num" =~ ^[0-9]+$ ]] || [[ "$backup_num" -lt 1 ]] || [[ "$backup_num" -gt $((i-1)) ]]; then
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        return 1
    fi
    
    local selected_backup="${backup_files[$((backup_num-1))]}"
    
    echo
    log_warning "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ UFW!"
    echo "–ë—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: $(basename "$selected_backup")"
    echo
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–≤–∏–ª –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    local current_backup
    current_backup="$backup_dir/ufw_rules_before_restore_$(date +%Y%m%d_%H%M%S).tar.gz"
    if tar -czf "$current_backup" -C /etc/ufw . 2>/dev/null; then
        log_info "–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫: $(basename "$current_backup")"
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UFW
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ UFW..."
    ufw --force disable
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª UFW..."
    if tar -xzf "$selected_backup" -C /etc/ufw; then
        log_success "–ü—Ä–∞–≤–∏–ª–∞ UFW –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ $(basename "$selected_backup")"
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º UFW
        log_info "–ó–∞–ø—É—Å–∫ UFW..."
        if ufw --force enable; then
            log_success "UFW –∑–∞–ø—É—â–µ–Ω —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"
            echo
            log_info "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å UFW:"
            ufw status verbose
        else
            log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UFW"
            return 1
        fi
    else
        log_error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª UFW"
        return 1
    fi
}
