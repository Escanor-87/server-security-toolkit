#!/bin/bash

# Docker Management Module - DISABLED
# –ú–æ–¥—É–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω

find_docker_compose_files() {
    # –ü–æ–∏—Å–∫ docker-compose —Ñ–∞–π–ª–æ–≤ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    local roots=("/opt" "/srv" "/var/www" "/docker" "/app" "$HOME" "/root")
    local patterns=("docker-compose.yml" "docker-compose.yaml" "compose.yml" "compose.yaml")
    local results=()

    for root in "${roots[@]}"; do
        [[ -d "$root" ]] || continue
        while IFS= read -r -d '' file; do
            results+=("$file")
        done < <(find "$root" -maxdepth 4 -type f \( -name "${patterns[0]}" -o -name "${patterns[1]}" -o -name "${patterns[2]}" -o -name "${patterns[3]}" \) -print0 2>/dev/null)
    done

    # –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if [[ ${#results[@]} -gt 0 ]]; then
        printf '%s\n' "${results[@]}" | awk '!seen[$0]++' | sort -u
    fi
}

get_compose_cmd() {
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É docker compose
    if docker compose version &>/dev/null; then
        echo "docker compose"
        return 0
    elif command -v docker-compose &>/dev/null; then
        echo "docker-compose"
        return 0
    else
        return 1
    fi
}

update_docker_compose() {
    local compose_file="$1"
    local quiet="${2:-yes}"   # yes = –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã

    local cmd
    cmd=$(get_compose_cmd) || { log_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"; return 1; }

    local dir base
    dir=$(dirname "$compose_file"); base=$(basename "$compose_file")
    log_info "üê≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ $base –≤ $dir"

    # –¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    $cmd -f "$compose_file" ps || true

    # Pull –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    log_info "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    $cmd -f "$compose_file" pull || log_warning "–ù–µ –≤—Å–µ –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å"

    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    if $cmd -f "$compose_file" down && $cmd -f "$compose_file" up -d; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        return 1
    fi

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    log_info "–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
    $cmd -f "$compose_file" ps || true

    if [[ "$quiet" != "yes" ]]; then
        echo
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..." -r
    fi
    return 0
}

update_all_docker_projects() {
    local files
    mapfile -t files < <(find_docker_compose_files)
    if [[ ${#files[@]} -eq 0 ]]; then
        log_warning "Docker Compose —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    fi

    local cmd
    cmd=$(get_compose_cmd) || { log_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"; return 1; }

    log_info "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö Docker –ø—Ä–æ–µ–∫—Ç–æ–≤ (${#files[@]} –Ω–∞–π–¥–µ–Ω–æ)"
    echo
    local ok=0 fail=0
    for f in "${files[@]}"; do
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        log_info "–û–±—Ä–∞–±–æ—Ç–∫–∞: $f"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        if update_docker_compose "$f" "yes"; then
            ((ok++))
            log_success "‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: $(dirname "$f")"
        else
            ((fail++))
            log_error "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $(dirname "$f")"
        fi
        echo
        sleep 1
    done

    echo
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    log_success "üìä –ò—Ç–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
    echo "‚Ä¢ –£—Å–ø–µ—à–Ω–æ: $ok"
    echo "‚Ä¢ –û—à–∏–±–æ–∫: $fail"
    echo "‚Ä¢ –í—Å–µ–≥–æ: ${#files[@]}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –æ–¥–∏–Ω —Ä–∞–∑
    if [[ $ok -gt 0 ]]; then
        echo
        read -p "–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker –æ–±—Ä–∞–∑—ã? (y/N): " -n 1 -r ans; echo
        if [[ $ans =~ ^[Yy]$ ]]; then
            log_info "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
            docker image prune -f || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ–±—Ä–∞–∑—ã"
            log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        else
            log_info "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞"
        fi
    fi

    echo
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..." -r
    return 0
}

show_docker_status() {
    clear
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë           Docker Status              ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
    if ! command -v docker &>/dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..." -r; return 0
    fi
    echo -e "${BLUE}üê≥ Docker –≤–µ—Ä—Å–∏—è:${NC}"; docker --version; echo
    echo -e "${BLUE}üì¶ Docker Compose –≤–µ—Ä—Å–∏—è:${NC}"
    if docker compose version &>/dev/null; then docker compose version; 
    elif command -v docker-compose &>/dev/null; then docker-compose --version; else echo "–ù–µ –Ω–∞–π–¥–µ–Ω"; fi
    echo
    echo -e "${BLUE}üèÉ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
    docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" || true
    echo
    echo -e "${BLUE}üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:${NC}"
    docker system df || true
    echo; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..." -r
}

docker_management() {
    while true; do
        clear
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë           Docker Management          ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
        echo "1. üîç –ù–∞–π—Ç–∏ Docker Compose –ø—Ä–æ–µ–∫—Ç—ã"
        echo "2. üöÄ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã (pull + restart)"
        echo "3. üê≥ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"
        echo "4. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Docker"
        echo "5. üßπ –û—á–∏—Å—Ç–∫–∞ (images)"
        echo "0. üîô –ù–∞–∑–∞–¥"
        echo
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-5]: " -n 1 -r choice; echo
        case $choice in
            1) list_docker_projects ;;
            2) update_all_docker_projects ;;
            3) select_and_update_project ;;
            4) show_docker_status ;;
            5) docker_cleanup ;;
            0) return 0 ;;
            *) log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"; sleep 1 ;;
        esac
    done
}

list_docker_projects() {
    clear
    log_info "üîç –ü–æ–∏—Å–∫ Docker Compose –ø—Ä–æ–µ–∫—Ç–æ–≤"
    echo
    local files
    mapfile -t files < <(find_docker_compose_files)
    if [[ ${#files[@]} -eq 0 ]]; then
        log_warning "Docker Compose —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..." -r
        return 0
    fi

    echo "üìã –ù–∞–π–¥–µ–Ω–æ ${#files[@]} –ø—Ä–æ–µ–∫—Ç–æ–≤:"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    local i=1
    for f in "${files[@]}"; do
        local dir base
        dir=$(dirname "$f"); base=$(basename "$f")
        echo "$i. $dir"
        echo "   –§–∞–π–ª: $base"
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        ((i++))
    done
    echo
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..." -r
    return 0
}

select_and_update_project() {
    clear
    log_info "üê≥ –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    echo
    local files
    mapfile -t files < <(find_docker_compose_files)
    if [[ ${#files[@]} -eq 0 ]]; then
        log_warning "–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"; echo; read -p "Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..." -r; return 0
    fi
    local i=1
    for f in "${files[@]}"; do
        echo "$i) $(dirname "$f") ($(basename "$f"))"; ((i++))
    done
    echo "0) –ù–∞–∑–∞–¥"; echo
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç [0-$((i-1))]: " -r n; echo
    [[ "$n" == "0" ]] && return 0
    if [[ ! "$n" =~ ^[0-9]+$ ]] || (( n<1 || n>i-1 )); then log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"; sleep 1; return 0; fi
    local sel="${files[$((n-1))]}"
    update_docker_compose "$sel" "no"
}

docker_cleanup() {
    clear
    log_info "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"
    echo
    read -p "–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã? (y/N): " -n 1 -r ans; echo
    if [[ $ans =~ ^[Yy]$ ]]; then
        docker image prune -f || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ–±—Ä–∞–∑—ã"
        log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        log_info "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞"
    fi
    echo; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..." -r
    return 0
}

manage_containers() {
    clear
    log_info "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"
    echo
    local names
    mapfile -t names < <(docker ps -a --format '{{.Names}}')
    if [[ ${#names[@]} -eq 0 ]]; then log_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"; read -p "Enter..." -r; return 0; fi
    local i=1
    for n in "${names[@]}"; do echo "$i) $n"; ((i++)); done; echo "0) –ù–∞–∑–∞–¥"; echo
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä [0-$((i-1))]: " -r k; echo
    [[ "$k" == "0" ]] && return 0
    if [[ ! "$k" =~ ^[0-9]+$ ]] || (( k<1 || k>i-1 )); then log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"; sleep 1; return 0; fi
    local cname="${names[$((k-1))]}"
    echo "1) üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å  2) ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å  3) ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å  4) üìã –õ–æ–≥–∏  0) –ù–∞–∑–∞–¥"; echo
    read -p "–î–µ–π—Å—Ç–≤–∏–µ [0-4]: " -n 1 -r act; echo
    case $act in
        1) docker restart "$cname" && log_success "–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" || log_error "–û—à–∏–±–∫–∞" ;;
        2) docker stop "$cname" && log_success "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" || log_error "–û—à–∏–±–∫–∞" ;;
        3) docker start "$cname" && log_success "–ó–∞–ø—É—â–µ–Ω" || log_error "–û—à–∏–±–∫–∞" ;;
        4) docker logs --tail 100 "$cname"; echo; read -p "Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..." -r ;;
        0) return 0 ;;
        *) log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
    esac
    echo; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞..." -r
    return 0
}
