#!/bin/bash

# Docker Management Module v1.0

# –ü–æ–∏—Å–∫ Docker Compose —Ñ–∞–π–ª–æ–≤
find_docker_compose_files() {
    local search_dirs=("$HOME" "/opt" "/var/www" "/srv" "/docker" "/app")
    local compose_files=()
    
    for dir in "${search_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            while IFS= read -r -d '' file; do
                compose_files+=("$file")
            done < <(find "$dir" -maxdepth 3 -type f \( -name "docker-compose.yml" -o -name "docker-compose.yaml" -o -name "compose.yml" -o -name "compose.yaml" \) -print0 2>/dev/null)
        fi
    done
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    local unique_files=()
    for file in "${compose_files[@]}"; do
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (.)
        local dir_name
        dir_name=$(dirname "$file")
        if [[ "$dir_name" == "." ]]; then
            continue
        fi
        
        local found=false
        for unique in "${unique_files[@]}"; do
            if [[ "$file" == "$unique" ]]; then
                found=true
                break
            fi
        done
        if [[ "$found" == "false" ]]; then
            unique_files+=("$file")
        fi
    done
    
    printf '%s\n' "${unique_files[@]}"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ Docker Compose –ø—Ä–æ–µ–∫—Ç–∞
update_docker_compose() {
    local compose_file="$1"
    local compose_dir
    compose_dir=$(dirname "$compose_file")
    
    log_info "üê≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ $(basename "$compose_file") –≤ $compose_dir"
    
    cd "$compose_dir" || {
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $compose_dir"
        return 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω
    local compose_cmd=""
    if command -v docker-compose &>/dev/null; then
        compose_cmd="docker-compose"
    elif docker compose version &>/dev/null; then
        compose_cmd="docker compose"
    else
        log_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    echo
    log_info "–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    $compose_cmd ps
    
    echo
    log_info "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    if $compose_cmd pull; then
        log_success "–û–±—Ä–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
    else
        log_warning "–ù–µ –≤—Å–µ –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å"
    fi
    
    echo
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    if $compose_cmd down && $compose_cmd up -d; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã (down + up -d)"
    else
        log_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        return 1
    fi
    
    echo
    log_info "–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
    $compose_cmd ps
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    echo
    while true; do
        read -p "–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker –æ–±—Ä–∞–∑—ã? (y/N): " -n 1 -r
        echo
        case $REPLY in
            [Yy])
                log_info "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
                docker image prune -f
                log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                break
                ;;
            [Nn]|"")
                log_info "–û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞"
                break
                ;;
            *)
                log_error "–í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–∑–æ–≤ –∏–ª–∏ 'n' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
                ;;
        esac
    done
    return 0  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
update_all_docker_projects() {
    local compose_files
    mapfile -t compose_files < <(find_docker_compose_files)
    
    if [[ ${#compose_files[@]} -eq 0 ]]; then
        log_warning "Docker Compose —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    fi
    
    log_info "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö Docker –ø—Ä–æ–µ–∫—Ç–æ–≤ (${#compose_files[@]} –Ω–∞–π–¥–µ–Ω–æ)"
    echo
    
    local updated_count=0
    local failed_count=0
    
    for compose_file in "${compose_files[@]}"; do
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        log_info "–û–±—Ä–∞–±–æ—Ç–∫–∞: $compose_file"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        if update_docker_compose "$compose_file"; then
            ((updated_count++))
            log_success "‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: $(dirname "$compose_file")"
        else
            ((failed_count++))
            log_error "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $(dirname "$compose_file")"
        fi
        
        echo
        if [[ $compose_file != "${compose_files[-1]}" ]]; then
            while true; do
                read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º? (Y/n): " -n 1 -r
                echo
                case $REPLY in
                    [Yy]|"")
                        break
                        ;;
                    [Nn])
                        log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                        break 2  # –í—ã—Ö–æ–¥ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞
                        ;;
                    *)
                        log_error "–í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
                        ;;
                esac
            done
        fi
    done
    
    echo
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    log_success "üìä –ò—Ç–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
    echo "‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: $updated_count"
    echo "‚Ä¢ –û—à–∏–±–æ–∫: $failed_count"
    echo "‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${#compose_files[@]}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    return 0  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é Docker Management
}

# –ü–æ–∫–∞–∑–∞—Ç—å Docker —Å—Ç–∞—Ç—É—Å
show_docker_status() {
    clear
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë           Docker Status              ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &>/dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    # Docker –≤–µ—Ä—Å–∏—è
    echo -e "${BLUE}üê≥ Docker –≤–µ—Ä—Å–∏—è:${NC}"
    docker --version
    echo
    
    # Docker Compose –≤–µ—Ä—Å–∏—è
    echo -e "${BLUE}üì¶ Docker Compose –≤–µ—Ä—Å–∏—è:${NC}"
    if command -v docker-compose &>/dev/null; then
        docker-compose --version
    elif docker compose version &>/dev/null; then
        docker compose version
    else
        echo "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    echo
    
    # –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo -e "${BLUE}üèÉ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo
    
    # –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    local total_containers
    total_containers=$(docker ps -a --format "{{.Names}}" 2>/dev/null | wc -l)
    echo -e "${BLUE}üìä –í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC} $total_containers"
    
    # –û–±—Ä–∞–∑—ã
    local total_images
    total_images=$(docker images --format "{{.Repository}}" 2>/dev/null | wc -l)
    echo -e "${BLUE}üñºÔ∏è  –í—Å–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤:${NC} $total_images"
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    echo
    echo -e "${BLUE}üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ Docker:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    docker system df 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Docker Management
docker_management() {
    while true; do
        clear
        echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${BLUE}‚ïë        Docker Management Menu        ‚ïë${NC}"
        echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
        if ! command -v docker &>/dev/null; then
            log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ"
            echo
            echo "1. üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker"
            echo "0. üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            echo
            read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-1]: " -n 1 -r choice
            echo
            
            case $choice in
                1) install_docker ;;
                0) return 0 ;;
                *) log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"; sleep 1 ;;
            esac
            continue
        fi
        
        echo "1. üîç –ù–∞–π—Ç–∏ Docker Compose –ø—Ä–æ–µ–∫—Ç—ã"
        echo "2. üöÄ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã (docker pull + restart)"
        echo "3. üê≥ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"
        echo "4. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Docker"
        echo "5. üßπ –û—á–∏—Å—Ç–∫–∞ Docker (–æ–±—Ä–∞–∑—ã, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, volumes)"
        echo "6. üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"
        echo "0. üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        echo
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-6]: " -n 1 -r choice
        echo
        
        case $choice in
            1) list_docker_projects ;;
            2) update_all_docker_projects ;;
            3) select_and_update_project ;;
            4) show_docker_status ;;
            5) docker_cleanup ;;
            6) manage_containers ;;
            0) return 0 ;;
            *)
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
                sleep 1
                ;;
        esac
        
        if [[ "$choice" != "0" ]]; then
            echo
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." -r
        fi
    done
}

# –°–ø–∏—Å–æ–∫ Docker –ø—Ä–æ–µ–∫—Ç–æ–≤
list_docker_projects() {
    clear
    log_info "üîç –ü–æ–∏—Å–∫ Docker Compose –ø—Ä–æ–µ–∫—Ç–æ–≤"
    echo
    
    local compose_files
    mapfile -t compose_files < <(find_docker_compose_files)
    
    if [[ ${#compose_files[@]} -eq 0 ]]; then
        log_warning "Docker Compose —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo
        echo "–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö:"
        echo "‚Ä¢ $HOME"
        echo "‚Ä¢ /opt"
        echo "‚Ä¢ /var/www"
        echo "‚Ä¢ /srv"
        echo "‚Ä¢ /docker"
        echo "‚Ä¢ /app"
        echo "‚Ä¢ $(pwd) (—Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)"
        return 0
    fi
    
    echo -e "${GREEN}üìã –ù–∞–π–¥–µ–Ω–æ ${#compose_files[@]} Docker Compose –ø—Ä–æ–µ–∫—Ç–æ–≤:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    local i=1
    for compose_file in "${compose_files[@]}"; do
        local dir_name
        dir_name=$(dirname "$compose_file")
        local file_name
        file_name=$(basename "$compose_file")
        
        echo "$i. $dir_name"
        echo "   –§–∞–π–ª: $file_name"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        local compose_cmd=""
        if command -v docker-compose &>/dev/null; then
            compose_cmd="docker-compose"
        elif docker compose version &>/dev/null; then
            compose_cmd="docker compose"
        fi
        
        if [[ -n "$compose_cmd" ]]; then
            cd "$dir_name" || continue
            local containers
            containers=$($compose_cmd ps --services 2>/dev/null | wc -l)
            local running
            running=$($compose_cmd ps --filter "status=running" --services 2>/dev/null | wc -l)
            echo "   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $running/$containers –∑–∞–ø—É—â–µ–Ω–æ"
        fi
        
        echo
        ((i++))
    done
}

# –í—ã–±–æ—Ä –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
select_and_update_project() {
    clear
    log_info "üê≥ –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    echo
    
    local compose_files
    mapfile -t compose_files < <(find_docker_compose_files)
    
    if [[ ${#compose_files[@]} -eq 0 ]]; then
        log_warning "Docker Compose —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    fi
    
    echo -e "${BLUE}–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    local i=1
    for compose_file in "${compose_files[@]}"; do
        echo "$i. $(dirname "$compose_file") ($(basename "$compose_file"))"
        ((i++))
    done
    
    echo "0. üîô –ù–∞–∑–∞–¥"
    echo
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç [0-$((${#compose_files[@]})): " -r project_choice
    
    if [[ "$project_choice" == "0" ]]; then
        return 0
    fi
    
    if [[ "$project_choice" =~ ^[0-9]+$ ]] && [[ "$project_choice" -ge 1 ]] && [[ "$project_choice" -le ${#compose_files[@]} ]]; then
        local selected_file="${compose_files[$((project_choice-1))]}"
        echo
        log_info "–í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: $(dirname "$selected_file")"
        echo
        update_docker_compose "$selected_file"
    else
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ Docker
docker_cleanup() {
    clear
    log_info "üßπ –û—á–∏—Å—Ç–∫–∞ Docker"
    echo
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—á–∏—Å—Ç–∫–∏:"
    echo "1. üñºÔ∏è  –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã"
    echo "2. üì¶ –£–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "3. üíæ –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes"
    echo "4. üåê –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ networks"
    echo "5. üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ)"
    echo "0. üîô –ù–∞–∑–∞–¥"
    echo
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-5]: " -n 1 -r cleanup_choice
    echo
    
    case $cleanup_choice in
        1)
            log_info "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
            docker image prune -f
            ;;
        2)
            log_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker container prune -f
            ;;
        3)
            log_info "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volumes..."
            docker volume prune -f
            ;;
        4)
            log_info "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö networks..."
            docker network prune -f
            ;;
        5)
            log_warning "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker!"
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                log_info "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker..."
                docker system prune -af --volumes
                log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            else
                log_info "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
            fi
            ;;
        0) return 0 ;;
        *) log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
    esac
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
manage_containers() {
    clear
    log_info "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"
    echo
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local containers
    mapfile -t containers < <(docker ps --format "{{.Names}}" 2>/dev/null)
    
    if [[ ${#containers[@]} -eq 0 ]]; then
        log_warning "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo
        while true; do
            read -p "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–≤–∫–ª—é—á–∞—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)? (y/N): " -n 1 -r
            echo
            case $REPLY in
                [Yy])
                    mapfile -t containers < <(docker ps -a --format "{{.Names}}" 2>/dev/null)
                    if [[ ${#containers[@]} -eq 0 ]]; then
                        log_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                        return 0
                    fi
                    break
                    ;;
                [Nn]|"")
                    log_info "–ü–æ–∫–∞–∑ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω"
                    return 0
                    ;;
                *)
                    log_error "–í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                    ;;
            esac
        done
    fi
    
    echo -e "${BLUE}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    local i=1
    for container in "${containers[@]}"; do
        local status
        status=$(docker ps -a --filter "name=^${container}$" --format "{{.Status}}" 2>/dev/null)
        local image
        image=$(docker ps -a --filter "name=^${container}$" --format "{{.Image}}" 2>/dev/null)
        echo "$i. $container"
        echo "   –û–±—Ä–∞–∑: $image"
        echo "   –°—Ç–∞—Ç—É—Å: $status"
        echo
        ((i++))
    done
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "1. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "2. ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "3. ‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "4. üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "5. üíª –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (bash/sh)"
    echo "0. üîô –ù–∞–∑–∞–¥"
    echo
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-5]: " -n 1 -r container_choice
    echo
    
    case $container_choice in
        1|2|3|4|5)
            echo
            read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ [1-${#containers[@]}]: " -r container_num
            
            if [[ ! "$container_num" =~ ^[0-9]+$ ]] || [[ "$container_num" -lt 1 ]] || [[ "$container_num" -gt ${#containers[@]} ]]; then
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
                return 1
            fi
            
            local container_name="${containers[$((container_num-1))]}"
            echo
            log_info "–í—ã–±—Ä–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container_name"
            echo
            
            case $container_choice in
                1)
                    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container_name..."
                    docker restart "$container_name"
                    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
                    ;;
                2)
                    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container_name..."
                    docker stop "$container_name"
                    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    ;;
                3)
                    log_info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container_name..."
                    docker start "$container_name"
                    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
                    ;;
                4)
                    log_info "–õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container_name:"
                    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                    docker logs --tail 50 "$container_name"
                    ;;
                5)
                    log_info "–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name..."
                    if docker exec -it "$container_name" bash 2>/dev/null; then
                        :
                    elif docker exec -it "$container_name" sh 2>/dev/null; then
                        :
                    else
                        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
                    fi
                    ;;
            esac
            ;;
        0) return 0 ;;
        *) log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" ;;
    esac
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker (–±–∞–∑–æ–≤–∞—è)
install_docker() {
    clear
    log_info "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
    echo
    
    log_warning "‚ö†Ô∏è  –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç –±–∞–∑–æ–≤—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker"
    echo "–î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä–≤–µ—Ä–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        echo
        echo "–î–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
        echo "‚Ä¢ Ubuntu/Debian: https://docs.docker.com/engine/install/ubuntu/"
        echo "‚Ä¢ –î—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã: https://docs.docker.com/engine/install/"
        return 0
    fi
    
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
    apt update
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
    
    log_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPG –∫–ª—é—á–∞ Docker..."
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    log_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker..."
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    
    log_info "–ó–∞–ø—É—Å–∫ Docker..."
    systemctl enable docker
    systemctl start docker
    
    if systemctl is-active --quiet docker; then
        log_success "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!"
        echo
        docker --version
        docker compose version
    else
        log_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker"
    fi
}
